#!/usr/bin/env python
# -*- coding: utf-8 -*-




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from m_librarian.translations import translations
from views.layout import layout
from views.search_authors_form import search_authors_form

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.3.1'
__CHEETAH_versionTuple__ = (3, 3, 1, 'final', 0)
__CHEETAH_genTime__ = 1720485596.472826
__CHEETAH_genTimestamp__ = 'Tue Jul  9 03:39:56 2024'
__CHEETAH_src__ = 'list_authors.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Jul  9 03:39:54 2024'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class list_authors(layout):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(list_authors, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<h1>\u041f\u043e\u0438\u0441\u043a \u0430\u0432\u0442\u043e\u0440\u043e\u0432</h1>
''')
        _v = VFFSL(SL,"search_authors_form",False)(searchList=VFFSL(SL,"searchList",True)) # u'$search_authors_form(searchList=$searchList)' on line 8, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$search_authors_form(searchList=$searchList)')) # from line 8, col 1.
        write(u'''

<h1>''')
        _v = VFFSL(SL,"title",True) # u'$title' on line 10, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'$title')) # from line 10, col 5.
        write(u'''</h1>

''')
        if VFFSL(SL,"authors",True): # generated from line 12, col 1
            _orig_filter_20064572 = _filter
            filterName = u'WebSafe'
            if "WebSafe" in self._CHEETAH__filters:
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            write(u'''  <table>
  <tr>
  ''')
            if False:
                _
            _ = VFFSL(SL,"getattr",False)(VFFSL(SL,"translations",True), 'ugettext', None) or VFFSL(SL,"translations.gettext",True)
            for column in VFFSL(SL,"columns",True): # generated from line 17, col 3
                write(u'''    <td style="text-align: center">''')
                if False:
                    _(VFFSL(SL,"column",True))
                _v = VFFSL(SL,"_",False)(VFFSL(SL,"column",True)) # u'$_($column)' on line 18, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'$_($column)')) # from line 18, col 36.
                write(u'''
''')
                if VFFSL(SL,"sort",True) in (VFFSL(SL,"column",True), '+'+VFFSL(SL,"column",True), '-'+VFFSL(SL,"column",True)): # generated from line 19, col 5
                    if VFFSL(SL,"sort",True) in (VFFSL(SL,"column",True), '+'+VFFSL(SL,"column",True)): # generated from line 20, col 7
                        sort_param = '-'+VFFSL(SL,"column",True)
                        sort_sign = '↓'
                    elif VFFSL(SL,"sort",True) == '-'+VFFSL(SL,"column",True): # generated from line 23, col 7
                        sort_param = VFFSL(SL,"quote",False)('+')+VFFSL(SL,"column",True)
                        sort_sign = '↑'
                else: # generated from line 27, col 5
                    sort_param = VFFSL(SL,"quote",False)('+')+VFFSL(SL,"column",True)
                    sort_sign = '↓'
                case_param = '1' if VFFSL(SL,"case_sensitive",True) else ''
                write(u'''    <a href="/list_authors/?search_authors=''')
                _v = VFFSL(SL,"search_authors",True) # u'$search_authors' on line 32, col 44
                if _v is not None: write(_filter(_v, rawExpr=u'$search_authors')) # from line 32, col 44.
                write(u'''&search_type=''')
                _v = VFFSL(SL,"search_type",True) # u'$search_type' on line 32, col 72
                if _v is not None: write(_filter(_v, rawExpr=u'$search_type')) # from line 32, col 72.
                write(u'''&case_sensitive=''')
                _v = VFFSL(SL,"case_param",True) # u'$case_param' on line 32, col 100
                if _v is not None: write(_filter(_v, rawExpr=u'$case_param')) # from line 32, col 100.
                write(u'''&sort=''')
                _v = VFFSL(SL,"sort_param",True) # u'$sort_param' on line 32, col 117
                if _v is not None: write(_filter(_v, rawExpr=u'$sort_param')) # from line 32, col 117.
                write(u'''">''')
                _v = VFFSL(SL,"sort_sign",True) # u'$sort_sign' on line 32, col 130
                if _v is not None: write(_filter(_v, rawExpr=u'$sort_sign')) # from line 32, col 130.
                write(u'''</a>
    </td>
''')
            write(u'''  </tr>
''')
            for author in VFFSL(SL,"authors",True): # generated from line 36, col 3
                write(u'''  <tr>
''')
                for column in VFFSL(SL,"columns",True): # generated from line 38, col 3
                    if VFFSL(SL,"column",True) == 'count': # generated from line 39, col 5
                        style = ' style="text-align: right; width: 5ex"'
                    else: # generated from line 41, col 5
                        style = ''
                    write(u'''    <td''')
                    _v = VFFSL(SL,"style",True) # u'$style' on line 44, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'$style')) # from line 44, col 8.
                    write(u'''><a href="/books-by-author/''')
                    _v = VFFSL(SL,"author.id",True) # u'$author.id' on line 44, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'$author.id')) # from line 44, col 41.
                    write(u'''/">
    ''')
                    _v = VFFSL(SL,"unicode",False)(VFFSL(SL,"getattr",False)(VFFSL(SL,"author",True), VFFSL(SL,"column",True)) or '') # u"$unicode($getattr($author, $column) or '')" on line 45, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u"$unicode($getattr($author, $column) or '')")) # from line 45, col 5.
                    write(u'''
    </a></td>
''')
                write(u'''  </tr>
''')
            write(u'''  </table>
''')
            _filter = self._CHEETAH__currentFilter = _orig_filter_20064572
        else: # generated from line 52, col 1
            write(u'''  <p>\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430!</p>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    title = 'Список авторов'

    _mainCheetahMethod_for_list_authors = 'writeBody'

## END CLASS DEFINITION

if not hasattr(list_authors, '_initCheetahAttributes'):
    templateAPIClass = getattr(list_authors,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(list_authors)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=list_authors()).run()


